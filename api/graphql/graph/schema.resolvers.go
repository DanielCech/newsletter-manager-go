package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"
	"strv-template-backend-go-api/api/graphql/graph/model"
	domuser "strv-template-backend-go-api/domain/user"
	"strv-template-backend-go-api/domain/user/postgres/dataloader"
	"strv-template-backend-go-api/types"
	apierrors "strv-template-backend-go-api/types/errors"
	"strv-template-backend-go-api/types/id"
	utilctx "strv-template-backend-go-api/util/context"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.CreateUserResponse, error) {
	email, err := types.NewEmail(string(input.Email))
	if err != nil {
		const publicErrMsg = "invalid email"
		return nil, apierrors.NewInvalidBodyError(err, "new email").WithPublicMessage(publicErrMsg)
	}
	createUserInput, err := domuser.NewCreateUserInput(
		input.Name,
		email,
		input.Password,
		(*id.User)(input.ReferrerID),
	)
	if err != nil {
		return nil, apierrors.NewInvalidBodyError(err, "new create user input").WithPublicMessage(err.Error())
	}
	user, session, err := r.userService.Create(ctx, createUserInput)
	if err != nil {
		return nil, err
	}
	resp := &model.CreateUserResponse{
		User:    model.FromUser(user),
		Session: model.FromSession(session),
	}
	return resp, nil
}

// ChangeUserPassword is the resolver for the changeUserPassword field.
func (r *mutationResolver) ChangeUserPassword(ctx context.Context, input model.ChangeUserPasswordInput) (*model.ChangeUserPasswordResponse, error) {
	userID, ok := utilctx.UserIDFromCtx(ctx)
	if !ok {
		return nil, errMissingUserID
	}
	if err := r.userService.ChangePassword(ctx, userID, input.OldPassword, input.NewPassword); err != nil {
		return nil, err
	}
	resp := &model.ChangeUserPasswordResponse{Message: "password changed successfully"}
	return resp, nil
}

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, input model.CreateSessionInput) (*model.CreateSessionResponse, error) {
	email, err := types.NewEmail(string(input.Email))
	if err != nil {
		const publicErrMsg = "invalid email"
		return nil, apierrors.NewInvalidBodyError(err, "new email").WithPublicMessage(publicErrMsg)
	}
	session, user, err := r.sessionService.Create(ctx, email, input.Password)
	if err != nil {
		return nil, err
	}
	resp := &model.CreateSessionResponse{
		User:    model.FromUser(user),
		Session: model.FromSession(session),
	}
	return resp, nil
}

// RefreshSession is the resolver for the refreshSession field.
func (r *mutationResolver) RefreshSession(ctx context.Context, input model.RefreshSessionInput) (*model.RefreshSessionResponse, error) {
	session, err := r.sessionService.Refresh(ctx, id.RefreshToken(input.RefreshToken))
	if err != nil {
		return nil, err
	}
	return model.FromSession(session), nil
}

// DestroySession is the resolver for the destroySession field.
func (r *mutationResolver) DestroySession(ctx context.Context, input model.DestroySessionInput) (*model.DestroySessionResponse, error) {
	if err := r.sessionService.Destroy(ctx, id.RefreshToken(input.RefreshToken)); err != nil {
		return nil, err
	}
	resp := &model.DestroySessionResponse{Message: "session destroyed"}
	return resp, nil
}

// UserMe is the resolver for the userMe field.
func (r *queryResolver) UserMe(ctx context.Context) (*model.User, error) {
	userID, ok := utilctx.UserIDFromCtx(ctx)
	if !ok {
		return nil, errMissingUserID
	}
	user, err := r.userService.Read(ctx, userID)
	if err != nil {
		return nil, err
	}
	return model.FromUser(user), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]model.User, error) {
	users, err := r.userService.List(ctx)
	if err != nil {
		return nil, err
	}
	return model.FromUsers(users), nil
}

// Referrer is the resolver for the referrer field.
func (r *userResolver) Referrer(ctx context.Context, obj *model.User) (*model.User, error) {
	if obj.ReferrerID == nil {
		return nil, nil
	}
	referrer, err := dataloader.ReadUser(ctx, id.User(*obj.ReferrerID))
	if err != nil {
		return nil, fmt.Errorf("reading user: %w", err)
	}
	return model.FromUser(referrer), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
