// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"strv-template-backend-go-api/types"
	"time"

	"github.com/google/uuid"
)

type ChangeUserPasswordInput struct {
	NewPassword types.Password `json:"newPassword"`
	OldPassword types.Password `json:"oldPassword"`
}

type ChangeUserPasswordResponse struct {
	Message string `json:"message"`
}

type CreateSessionInput struct {
	Email    Email          `json:"email"`
	Password types.Password `json:"password"`
}

type CreateSessionResponse struct {
	User    *User                   `json:"user"`
	Session *RefreshSessionResponse `json:"session"`
}

type CreateUserInput struct {
	Name       string         `json:"name"`
	Email      Email          `json:"email"`
	Password   types.Password `json:"password"`
	ReferrerID *uuid.UUID     `json:"referrerId,omitempty"`
}

type CreateUserResponse struct {
	User    *User                   `json:"user"`
	Session *RefreshSessionResponse `json:"session"`
}

type DestroySessionInput struct {
	RefreshToken string `json:"refreshToken"`
}

type DestroySessionResponse struct {
	Message string `json:"message"`
}

type RefreshSessionInput struct {
	RefreshToken string `json:"refreshToken"`
}

type RefreshSessionResponse struct {
	AccessToken           string    `json:"accessToken"`
	AccessTokenExpiresAt  time.Time `json:"accessTokenExpiresAt"`
	RefreshToken          string    `json:"refreshToken"`
	RefreshTokenExpiresAt time.Time `json:"refreshTokenExpiresAt"`
}

type Role string

const (
	RoleUser  Role = "USER"
	RoleAdmin Role = "ADMIN"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
