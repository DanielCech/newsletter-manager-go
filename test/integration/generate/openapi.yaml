openapi: 3.0.3
info:
  title: IceBreaker API
  version: 0.0.0
servers:
- url: https://api.dev.svc.icebreaker.strv.com
- url: http://localhost:8080
tags:
- name: maintenance
  description: Maintenance API
- name: signin
  description: Signing in
- name: user
  description: User-related endpoints
- name: event
  description: Event endpoints
paths:
  /api/v1/signin/firebase:
    post:
      tags:
      - signin
      summary: Sign in via Firebase
      description: "Sign in using Firebase ID token. Can use Google or Apple OAuth\
        \ provider, or anonymous provider.\nIf there is no user account associated\
        \ with the OAuth provider account,\nthe user is created and their name, email\
        \ and image url are prefilled from the provider.\nReturns the existing user\
        \ if it (associated OAuth provider account) exists.\n\nThe ID token should\
        \ be refreshed after this for further api calls, as this endpoint adds custom\
        \ claims to it\nthat other endpoints need. Use `auth.currentUser.getIdToken(true)`\
        \ to force refreshing the ID token."
      operationId: signInFirebase
      responses:
        "200":
          description: Signed in
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SignInResp'
        "400":
          description: Input body is not valid JSON
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "401":
          description: Invalid google ID token
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/users/current:
    get:
      tags:
      - user
      summary: Get information about the current user
      operationId: currentUserInfo
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in user no longer exists. Probably reused, still valid\
            \ access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
    delete:
      tags:
      - user
      summary: Delete logged in user
      description: Permanently delete currently logged in user. Removes them from
        all events.
      operationId: deleteUser
      responses:
        "204":
          description: User deleted
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in firebase user no longer exists. Probably reused,\
            \ still valid access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
    patch:
      tags:
      - user
      summary: Update info of logged in user
      description: "Updates the user's info, also setting their `finalized` flag."
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateReq'
        required: true
      responses:
        "200":
          description: User Updated
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UserUpdateResp'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in user no longer exists. Probably reused, still valid\
            \ access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/users/current/participating-events:
    get:
      tags:
      - user
      summary: List events the logged in user is participating in
      operationId: listParticipatingEvents
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Events'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in user no longer exists. Probably reused, still valid\
            \ access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/users/current/organizing-events:
    get:
      tags:
      - user
      summary: List events the logged in user is organizing
      operationId: listOrganizingEvents
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Events'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in user no longer exists. Probably reused, still valid\
            \ access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/users/current/upload-image:
    post:
      tags:
      - user
      summary: Initialize image upload
      description: "Create an upload link that the user profile image can be uploaded\
        \ to.\nAfter uploading an image to returned URL, client should call `PATCH\
        \ /api/v1/users/current` with ID of uploaded image\n(ID is also returned from\
        \ this endpoint)."
      operationId: startUserImageUpload
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UploadImageResp'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in user no longer exists. Probably reused, still valid\
            \ access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events:
    post:
      tags:
      - event
      summary: Create a new event as an organizer
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventReq'
        required: true
      responses:
        "200":
          description: Event created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Event'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "403":
          description: Logged in user does not have sufficient profile info to organize
            an event
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in user no longer exists. Probably reused, still valid\
            \ access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}:
    get:
      tags:
      - event
      summary: Read an existing event
      operationId: getEvent
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Event'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
    patch:
      tags:
      - event
      summary: Update an existing event
      operationId: updateEvent
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventReq'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Event'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/cancel:
    post:
      tags:
      - event
      summary: Cancel event. Event "soft" deletion.
      operationId: cancelEvent
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: Event canceled
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/join:
    post:
      tags:
      - event
      summary: Join an event as a participant
      operationId: joinEvent
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventJoinReq'
        required: true
      responses:
        "204":
          description: Event joined
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "409":
          description: "One of: Already joined (`ERR_ALREADY_EXISTS`), Too many participants\
            \ (`ERR_EVENT_IS_FULL`)."
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/leave:
    post:
      tags:
      - event
      summary: Leave an event as a participant
      operationId: leaveEvent
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: Event left
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "409":
          description: The user is not participating (`ERR_NOT_PARTICIPATING`).
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/questions:
    get:
      tags:
      - event
      summary: Get questions for an event that organizer has selected
      operationId: getEventQuestions
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventQuestionsWithOptions'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/participants:
    get:
      tags:
      - event
      summary: List of event participants
      operationId: listEventParticipants
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Participants'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "403":
          description: Not associated with event (not participant or organizer).
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/participants/{AuthorID}:
    delete:
      tags:
      - event
      summary: Delete a participant from event
      description: Permanently delete a participant and all related records from event.
      operationId: deleteParticipant
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      - name: AuthorID
        in: path
        description: ID of the participant to delete
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: Participant deleted
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "403":
          description: Not a participant of the event.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/score:
    post:
      tags:
      - event
      summary: Report a result of one game round
      operationId: reportGameRoundResult
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreReq'
        required: true
      responses:
        "204":
          description: Success
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "403":
          description: Not a participant of the event.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/{eventId}/leaderboard:
    get:
      tags:
      - event
      summary: Get the leaderboard of the event's game
      operationId: getEventLeaderboard
      parameters:
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Scores'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "403":
          description: Not associated with event (not participant or organizer).
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/code/{eventCode}:
    get:
      tags:
      - event
      summary: Get an event by its code for joining
      operationId: getEventByCode
      parameters:
      - name: eventCode
        in: path
        description: Code for the event
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventWithStatus'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/upload-image:
    post:
      tags:
      - event
      summary: Initialize upload of event image
      description: "Create an upload link that the event image can be uploaded to.\n\
        After uploading an image to returned URL, client should call `PATCH /api/v1/events/{eventId}`\
        \ with ID of uploaded image.\n(ID is also returned from this endpoint).\n\
        It is also possible to upload the event image prior to the event creation.\
        \ In this case `POST /api/v1/events` also accepts ID of the uploaded image."
      operationId: startEventImageUpload
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UploadImageResp'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: "Logged in user no longer exists. Probably reused, still valid\
            \ access token"
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/questions:
    get:
      tags:
      - event
      summary: Get static questions for all event categories
      operationId: getStaticQuestions
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventQuestions'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/events/questions-with-options:
    get:
      tags:
      - event
      summary: Get static questions for all event categories with their options
      operationId: getStaticQuestionsWithOptions
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventQuestionsWithOptions'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /api/v1/event-categories/{eventCategory}/images:
    get:
      tags:
      - event
      summary: (TODO) Get possible images for particular event category
      operationId: getEventCategoryImages
      parameters:
      - name: eventCategory
        in: path
        description: Type of the event
        required: true
        schema:
          $ref: '#/components/schemas/EventCategory'
      responses:
        "200":
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EventImages'
        "401":
          description: Authentication token is not present or not valid
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
        "404":
          description: Event type not found. Or outdated user's access token.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/APIError'
      security:
      - bearerAuth: []
  /healthz:
    get:
      tags:
      - maintenance
      description: Heartbeat
      operationId: healthz
      responses:
        "204":
          description: OK
  /api/openapi.yaml:
    get:
      tags:
      - maintenance
      summary: Get content of openapi.yaml
      operationId: openApi
      responses:
        "200":
          description: Content of this file
components:
  schemas:
    SignInResp:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    APIError:
      required:
      - errorCode
      - requestId
      type: object
      properties:
        requestId:
          type: string
          description: Request ID
          format: uuid
          example: 2cb1a484-0f55-4e4a-a627-16a322d9eee6
        errorCode:
          type: string
          description: Error code
          example: ERR_INVALID_REQUEST
          enum:
          - ERR_INVALID_REQUEST
          - ERR_UNAUTHENTICATED
          - ERR_FORBIDDEN
          - ERR_NOT_FOUND
          - ERR_ALREADY_EXISTS
          - ERR_GONE
          - ERR_PAYLOAD_TOO_LARGE
          - ERR_INVALID_BODY
          - ERR_EVENT_IS_FULL
        errorMessage:
          type: string
          description: Public human readable error message
          example: invalid field xyz
        errorData:
          type: object
          description: Any additional structured error data
    User:
      required:
      - email
      - finalized
      - id
      - imageUrl
      - name
      - strongAuth
      type: object
      properties:
        id:
          type: string
          description: User ID
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        name:
          type: string
          description: User full name
          nullable: true
          example: John Doe
        instagram:
          type: string
          description: User's instagram
          nullable: true
          example: '@lama_instagram'
        linkedin:
          type: string
          description: User's linkedin
          nullable: true
          example: in/lama_linkedin
        imageUrl:
          type: string
          description: link to user profile image
          format: uri
          example: https://lh3.googleusercontent.com/a/AGNmyxZJmhMMisDhNUWli8n_5AIp_0e4ixv6IC00a7y0=s96-c
        finalized:
          type: boolean
          description: "Whether the user finished registration. False for newly created\
            \ users, true if update `PUT /api/v1/users/current` endpoint was called\
            \ for existing user (i.e. they confirmed their profile info)."
        strongAuth:
          type: boolean
          description: "Whether the user is using useful authentication provider,\
            \ which enables them to be organizer of events. False for anonymous (guest)\
            \ users."
    UserUpdateReq:
      type: object
      properties:
        name:
          type: string
          description: User full name
          nullable: true
          example: John Doe
        instagram:
          type: string
          description: User's instagram
          nullable: true
          example: '@lama_instagram'
        linkedin:
          type: string
          description: User's linkedin
          nullable: true
          example: in/lama_linkedin
        imageId:
          type: string
          description: ID of image from `POST /api/v1/users/current/upload-image`
          format: uuid
          nullable: true
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
    UserUpdateResp:
      required:
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    UploadImageResp:
      required:
      - id
      - url
      type: object
      properties:
        id:
          type: string
          description: Image ID
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        url:
          type: string
          description: "URL where the image should be uploaded to, using PUT request"
          format: url
          example: https://dev-event-facematch-user-images.s3.us-east-1.amazonaws.com/d99516af-bd36-4c93-865d-c1a47a04dd98?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=ASIA2WUUDOUPQVT3FL7D%2F20230323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230323T131619Z&X-Amz-Expires=300&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEPb%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLWVhc3QtMSJGMEQCIHxERPvd4ddRnlAjdumTfZxWf5mb%2BkPSjIxjBvdaR5WVAiAHWEqBLEtpke3xPrzhN5zOtBTozxRf4EbS307WK1nNDSqcAwi%2B%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDczNTgyMzc1NDUyNyIMfA4gwPXLumjyZxksKvACTMAyu3JGO4iivjXvn4bS4w%2F3HAZM9gKCWjZTjJsWhVVKx1SXz7asG6X1ZKi%2FA1O59a0zZEJ9wUIfjIchqwfv3CWZ3RY3Nhmv436LF4O7Sgi16JB4C%2BA2PS9l2h%2FuuSSzN5rSFKW5qnZpxpqd%2FLbf3QuTTopoO3oPnsoZ2z56yan%2FPj0MQ2TL1iYrfdaZ7ODvq9ESWjCMGiSfCFEWBfYeYbzyErtPM1GnoLGKwOe%2Bssa4CPZjkWzOb3pxTnRqUT8D%2F6ZfS%2BQySLBc4PSGN%2Bb6JUuWIzKpmxm0RWtaiX74JgHjpY0Kc7CENJbbM1lTfEUqDXvpJxAG3XMwSWxmWLvToQynZXEXQrUmrjuOopm7HNRw2aHyvYnTHyuYevmvl2kXO2KgDfx8eIqcl316xpzoLL5sT4FkCGvdEqyzAZLqDH66PcQCCtFUYbQwAgg6%2FC%2Fg7fXyf8iJZ6o7CNJbR%2B2jhoGfpXPIYZHJj3PiAZoMAsgw56HxoAY6pwEAawFmnFFIYMXCcMJZOevllejr053d9OyoEc9wa2OuMD6o7nMncewLibLOWcZuNRocfav9BSKccp4ctcN55%2BztruZEg%2B9%2FEFcoyzMeeRJMFZaKwdBffAVXH5N0xpXwp9u2I3QDPrWFNEpt4%2FGwHNhTgJiStlJIh5BmItsqBoKxa72djgyO0THzIYIKacGv93u%2FGmsx0egtF5qFoMhQtkHk5Oxb3RHL%2FA%3D%3D&X-Amz-SignedHeaders=host&x-id=PutObject&X-Amz-Signature=73ce53e03478062b310c01b40d0dd869b154eb54a08b07d903abdb514953014e
    CreateEventReq:
      required:
      - category
      - endTime
      - gameType
      - questionIds
      - size
      - startTime
      - title
      type: object
      properties:
        title:
          type: string
          description: Title name of the event
          example: Test event
        category:
          $ref: '#/components/schemas/EventCategory'
        location:
          type: string
          description: The location of an event or the link
          nullable: true
          example: Dummy location
        size:
          $ref: '#/components/schemas/EventSize'
        imageId:
          type: string
          description: ID of uploaded image (only one of imageId and staticImageId
            should be non-null). Use it only if you already have ID of uploaded event
            image.
          format: uuid
          nullable: true
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        staticImageId:
          type: string
          description: ID of static image on frontend (only one of imageId and staticImageId
            should be non-null)
          nullable: true
          example: "{{default-3}}"
        startTime:
          type: string
          description: Start time of the real-life event (not the game)
          format: date-time
          example: 2023-04-04T16:48:37Z
        endTime:
          type: string
          description: End time of the real-life event (not the game)
          format: date-time
          example: 2023-04-04T16:48:37Z
        gameType:
          $ref: '#/components/schemas/GameType'
        questionIds:
          type: array
          description: IDs of questions for specified event category that the organizer
            has chosen
          example: "[\"ac0fee06-b65b-4985-87ef-e77b20befa39\", \"ac0fee06-b65b-4985-87ef-e77b20befa39\"\
            ]"
          items:
            type: string
            format: uuid
    Event:
      required:
      - category
      - endTime
      - gameType
      - id
      - location
      - organizer
      - size
      - startTime
      - title
      type: object
      properties:
        id:
          type: string
          description: Event ID
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        title:
          type: string
          description: Title name of the event
          example: Event Title
        category:
          $ref: '#/components/schemas/EventCategory'
        size:
          $ref: '#/components/schemas/EventSize'
        location:
          type: string
          description: The optional location or link
          nullable: true
          example: Los Angeles
        imageURL:
          type: string
          description: The event image URL
          nullable: true
          example: https://picsum.photos/200/300
        staticImageId:
          type: string
          description: ID of static image on frontend (only one of imageId and staticImageId
            should be non-null)
          nullable: true
          example: "{{default-3}}"
        startTime:
          type: string
          description: Start time of the real-life event (not the game)
          format: date-time
          example: 2023-04-04T16:48:37Z
        endTime:
          type: string
          description: End time of the real-life event (not the game)
          format: date-time
          example: 2023-04-04T16:48:37Z
        code:
          type: string
          description: Code for joining and generating share dynamic links. Only available
            if the requesting user is an organizer
          example: bgbwke
        isCanceled:
          type: boolean
          description: The event has been canceled.
          example: false
        shareLink:
          type: string
          description: Dynamic links for sharing. Only available if the requesting
            user is an organizer
          example: https://dev.icebreaker.strv.com/links/bTvq5wHjJwiMp1NT8
        gameType:
          $ref: '#/components/schemas/GameType'
        organizer:
          $ref: '#/components/schemas/Organizer'
    UpdateEventReq:
      type: object
      properties:
        title:
          type: string
          description: Title name of the event
          example: Updated title
        category:
          $ref: '#/components/schemas/EventCategory'
        location:
          type: string
          description: The location of an event or the link
          example: Los Angeles
        size:
          $ref: '#/components/schemas/EventSize'
        imageId:
          type: string
          description: ID of uploaded image (only one of imageId and staticImageId
            should be non-null). Use it only if you already have ID of uploaded event
            image.
          format: uuid
          nullable: true
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        staticImageId:
          type: string
          description: ID of static image on frontend (only one of imageId and staticImageId
            should be non-null)
          nullable: true
          example: "{{default-3}}"
        startTime:
          type: string
          description: Start time of the real-life event (not the game)
          format: date-time
          example: 2023-04-04T16:48:37Z
        endTime:
          type: string
          description: End time of the real-life event (not the game)
          format: date-time
          example: 2023-04-04T16:48:37Z
    EventJoinReq:
      type: object
      properties:
        optionIds:
          type: array
          description: IDs of question options for specified event that the user has
            chosen
          example: "[\"ac0fee06-b65b-4985-87ef-e77b20befa39\", \"ac0fee06-b65b-4985-87ef-e77b20befa39\"\
            ]"
          items:
            type: string
            format: uuid
    EventQuestionsWithOptions:
      type: array
      items:
        $ref: '#/components/schemas/EventQuestionWithOption'
    Participants:
      type: array
      items:
        $ref: '#/components/schemas/ParticipantWithAnswers'
    ScoreReq:
      required:
      - score
      type: object
      properties:
        score:
          type: integer
          description: amount of questions the user correctly answered during the
            game round
          example: 5
    Scores:
      type: array
      items:
        $ref: '#/components/schemas/Score'
    EventWithStatus:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/Event'
        alreadyJoined:
          type: bool
          description: User has already joined the event (false for not authenticated
            users)
          example: false
        isFull:
          type: bool
          description: Event reaches its full capacity
          example: true
    EventQuestions:
      type: array
      items:
        $ref: '#/components/schemas/EventQuestion'
    EventCategory:
      type: string
      description: The category of the event
      example: sport
      enum:
      - celebration
      - sport
      - meetup
      - other
    EventImages:
      type: array
      description: Available images for particular event category
      items:
        $ref: '#/components/schemas/EventImage'
    EventSize:
      type: string
      description: The size of the event
      example: size31To50
      enum:
      - sizeTo10
      - size10To30
      - size31To50
    GameType:
      type: string
      description: Type of the event's game
      example: eventMatch
      enum:
      - eventMatch
      - letMeGuess
    Organizer:
      required:
      - imageUrl
      - name
      type: object
      properties:
        id:
          type: string
          description: ID of User
          format: uuid
          example: 76f05f80-7a83-4bfe-a280-13947533757d
        name:
          type: string
          description: Organizer full name
          example: John Doe
        instagram:
          type: string
          description: Organizer's instagram
          nullable: true
          example: '@lama_instagram'
        linkedin:
          type: string
          description: Organizer's linkedin
          nullable: true
          example: in/lama_linkedin
        imageUrl:
          type: string
          description: Link to Organizer's profile image
          format: uri
          example: https://lh3.googleusercontent.com/a/AGNmyxZJmhMMisDhNUWli8n_5AIp_0e4ixv6IC00a7y0=s96-c
    EventQuestionWithOption:
      required:
      - id
      - text
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        text:
          type: string
          example: Favorite dish?
        category:
          $ref: '#/components/schemas/EventCategory'
        options:
          type: array
          items:
            $ref: '#/components/schemas/EventQuestionOption'
      description: Question for event game that the organizer has chosen (or can choose)
        with all options
    ParticipantWithAnswers:
      required:
      - answers
      - participant
      type: object
      properties:
        participant:
          $ref: '#/components/schemas/Participant'
        answers:
          $ref: '#/components/schemas/Answers'
    Score:
      required:
      - score
      type: object
      properties:
        participant:
          $ref: '#/components/schemas/Participant'
        score:
          type: number
          description: the average score of the last five games
          format: float
          example: 4.65
    EventQuestion:
      required:
      - id
      - text
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        text:
          type: string
          example: Favorite dish?
        category:
          $ref: '#/components/schemas/EventCategory'
      description: Question for event game that the organizer has chosen (or can choose)
    EventImage:
      required:
      - id
      - url
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        url:
          type: string
          format: url
          example: https://picsum.photos/200/300
      description: Predefined event images
    EventQuestionOption:
      required:
      - id
      - text
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        option:
          type: string
          example: Burger
        gameQuestion:
          type: string
          nullable: true
          example: Guess who goes for burger after every party?
      description: Option for a question that user can choose
    Participant:
      required:
      - id
      - imageUrl
      - name
      type: object
      properties:
        id:
          type: string
          description: User ID
          format: uuid
          example: ac0fee06-b65b-4985-87ef-e77b20befa39
        name:
          type: string
          description: User full name
          example: John Doe
        instagram:
          type: string
          description: User's instagram
          nullable: true
          example: '@lama_instagram'
        linkedin:
          type: string
          description: User's linkedin
          nullable: true
          example: in/lama_linkedin
        imageUrl:
          type: string
          description: Link to user profile image
          format: uri
          example: https://lh3.googleusercontent.com/a/AGNmyxZJmhMMisDhNUWli8n_5AIp_0e4ixv6IC00a7y0=s96-c
    Answers:
      type: array
      description: User's answers for questions defined in the event
      items:
        $ref: '#/components/schemas/Answer'
    Answer:
      required:
      - optionId
      - questionId
      type: object
      properties:
        questionId:
          type: string
          description: ID of question
          format: uuid
          example: 76f05f80-7a83-4bfe-a280-13947533757d
        optionId:
          type: string
          description: ID of selected option
          format: uuid
          example: f79ed307-7b42-441c-9ece-eeb0a2d35dc0
  responses:
    BadRequestError:
      description: Input body is not valid JSON
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/APIError'
    UnauthenticatedError:
      description: Authentication token is not present or not valid
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/APIError'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
